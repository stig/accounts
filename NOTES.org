* Tasks

  I've decided to do these things for now. That doesn't mean that they're not
  open for change later. This is a _toy & learning_ project, after all.

** DONE Produce actual [[https://en.wikipedia.org/wiki/Hash-based_message_authentication_code][HMAC]]

   What goes into this should be:
   - user-id :: The id of the user attempting to log in.
   - last login :: Specific to the user, this part guards against replay
                   attacks. Using a HMAC to log in automatically invalidates it
                   so it cannot be used again.
   - server epoch :: The current epoch timestamp at the time of initiating the
                     login request. This is used to enforce a "freshness
                     guarantee" on the HMAC.
   - server secret :: A secret only the server knows. *Must* be invididual for
                      each environment / application, but must be shared across
                      servers handling the same URL.

   Note that the user does not choose any of those. (Except indirectly the
   epoch.) Thus there is little scope for finding collisions.

** DONE Create URLs containing HMAC

   Create a URL with the proper HMAC from above that can be used to finish the
   login. Update the email body to use this URL, and check for that URL in the
   body of the email.

   This URL should have the following parts:
   - user-id
   - timestamp
   - hmac

   Specifically, we never disclose the user's last login, nor the server
   secret. We only use these to create and verify the HMAC. This way we don't
   have to create a table of tokens waiting for verification.

** DONE Remove example component
** TODO Reject expired login links

   We should reject expired login links, without doing any database hits.

** TODO Reject login links with invalid hmac
** TODO Ability to complete login

   When someone clicks on a login link we should do the following:
   - Check if the provided timestamp is recent enough. (Let's keep this
     configurable on the server.) If not, throw an error.
   - Check if the user exists. If not, throw an error. Obviously.
   - Create a new HMAC using these details:
     | What                 | From           |
     |----------------------+----------------|
     | user-id              | request        |
     | last login timestamp | db user record |
     | timestamp            | request        |
     | server secret        | server config  |
   - Compare the new HMAC to the one from the request. If it does not match,
     throw an error. Otherwise, it was a valid request, so present a form
     asking for the user to confirm that they want to log in. Optionally, offer
     them to name the device they're logging in from.

** TODO Record each successful login

   We don't want to store last login in the users table. Let's have an
   append-only /logins/ table that stores the time(s) of every successful
   login. It should contain the following fields:

   - User id
   - Login initiated timestamp (from request)
   - Login completed timestamp
   - Name of device they're logging in from, if provided.

   Data from this table can be used to tweak the server timeout. It can also
   be used for user support, or as an audit trail. If a user specifies a new
   device we can flag that in an email to them.

** TODO Decide on scheme for opaque user ids

   This could be a UUID, or possibly MD5(salt+email). One benefit of the latter
   is that you cannot attempt to guess how long a user has been on the site
   from their user id.

** TODO Migrate from SQLite to PostgreSQL

   This is likely to mainly have some challenges around tests. We may have to
   beef up the test db component to create the db first.

* Open questions

  I have no idea about these things yet.

** TODO Is there a way to infer hostname?

   When I'm connected to internet my local server answers to
   http://0.0.0.0:3000/ -- however, when I'm not it ansers to
   http://localhost:3000 -- is there a way to infer which from the running
   process?

   I note that the request has ={:headers {"host" "http://localhost:3000"}}=.
   Is it safe to rely on this for our emails? Can it be spoofed?

** TODO How would people update their email address?
** TODO Should people be able to use phone numbers instead of email?
